%YAML 1.2
---
# Copyright 2021 Enduriel
name: Squirrel
version: 2
comment: 'Squirrel Improved Syntax: version 3.1.0'
file_extensions:
  - nut
scope: source.nut
contexts:
  main:
    - include: control
    - include: no-control

  no-control:
    - include: class-defs
    - include: comments
    - include: strings
    - include: constants
    - include: enum-defs
    - include: function-defs
    - include: lambda-def
    - include: basics
    - include: function-calls
    - include: parameter-vars
    - include: default-braces
    - include: punctuation
    - include: storage

  default-braces:
    - match: '\{'
      scope: punctuation.section.braces.begin
      push:
        - meta_scope: meta.braces
        - match: '\}'
          scope: punctuation.section.braces.end
          pop: true
        - include: main
    - match: '\['
      scope: punctuation.section.brackets.begin
      push:
        - meta_scope: meta.brackets
        - match: '\]'
          scope: punctuation.section.brackets.end
          pop: true
        - include: no-control
    - match: '\}|\]'
      scope: invalid.illegal.squirrel

  comments:
    - match: \/\*
      scope: punctuation.definition.comment.squirrel
      push:
        - meta_scope: comment.block.squirrel
        - match: \*\/
          scope: punctuation.definition.comment.squirrel
          pop: true
    - match: (//|#).*$\n?
      scope: comment.line.squirrel
      captures:
        1: punctuation.definition.comment.squirrel

  enum-defs:
    - match: \benum\b
      scope: storage.type.enum
      push:
        - match: '$|(?={)'
          pop: true
        - match: '\w+'
          scope: entity.name.enum.squirrel
    - match: (::|\.)?([^\d\W]\w*)\s+(<-|=)\s+(enum)
      captures:
        1: punctuation.accessor.squirrel
        2: entity.name.enum.squirrel
        3: keyword.operator.squirrel
        4: storage.type.enum.squirrel

  class-defs:
    - match: \bclass\b
      scope: storage.type.class.squirrel
      push:
        - include: class-ends-or-extends
        - match: '\w+'
          scope: entity.name.class.squirrel
    - match: '(::|\.)?([^\d\W]\w*)\s+(<-|=)\s+(class)'
      captures:
        1: punctuation.accessor.squirrel
        2: entity.name.class.squirrel
        3: keyword.operator.squirrel
        4: storage.type.class.squirrel
      push:
        - include: class-ends-or-extends

  class-ends-or-extends:
    - match: '$|(?={)'
      pop: true
    - match: \bextends\b
      scope: storage.modifier.extends.squirrel
      push:
        - include: class-extends

  class-extends:
    - include: constants
    - match: '([^\d\W]+)\s*(?=::|\.)'
      scope: variable.other.member.squirrel
    - include: function-calls-member
    - match: ::|\.
      scope: punctuation.accessor.squirrel
    - match: '\w+(?=\s*$|{)'
      scope: entity.other.inherited-class.squirrel
      pop: true

  function-defs:
    - match: \bconstructor\s*(?=\()
      scope: entity.name.function.constructor
      push: start-parameters
    - match: '\b(function)(?=(?:(?:\s*)|(?:\s.*))\()'
      scope: storage.type.function keyword.declaration.function
      push: function-def-1
    - match: '(::|\.)?([^\d\W]\w*)\s+(<-|=)\s+(function|@)\s*(?=\()'
      captures:
        1: punctuation.accessor.squirrel
        2: entity.name.function.squirrel
        3: keyword.operator.squirrel
        4: storage.type.function keyword.declaration.function
      push: start-parameters

  lambda-def:
    - match: '@'
      scope: storage.type.function keyword.declaration.function
      push: start-parameters

  function-def-all:
    - match: _(?:cmp|mul|add|sub|div|mod|unm|newslot|delslot|set|get|typeof|tostring|nexti|cloned|inherited|newmember|call)
      scope: support.function.squirrel
    - match: '[^\d\W]\w*(?=\s*\()'
      scope: entity.name.function.squirrel
      set: start-parameters
    - match: '(?=\()'
      set: start-parameters

  function-def-1:
    - match: '::'
      scope: punctuation.accessor.squirrel
      set: function-def-2
    - include: function-def-all
    - match: '[^\d\W]\w*'
      scope: variable.other.squirrel

  function-def-2:
    - match: '::'
      scope: punctuation.accessor.squirrel
    - include: function-def-all
    - match: '[^\d\W]\w*'
      scope: variable.other.member.squirrel

  function-calls:
    - meta_scope: meta.function.call
    - match: '(array|split|blob|regexp|format|lstrip|rstrip|assert|cast2fi|casti2f|date|getroottable|swap2|swap4|swapfloat|time)\s*(?=\()'
      scope: support.function.squirrel
      push: start-parameters
    - match: '(?:::)?[^\d\W]\w*\s*(?=\()'
      scope: variable.function.squirrel
      push: start-parameters

  function-calls-member:
    - meta_scope: meta.function.call
    - match: '(len|to(?:string|float|integer|char|lower|upper)|slice|find|raw(?:delete|get|in|set)|clear|append|push|extend|pop|op|insert|remove|resize|sort|reverse|map|apply|capture|match|search|(?:set|get)(?:delegate|attributes|root)|filter|reduce|weakref|keys|values|top|(?:p|a|pa|)call|bindenv|getinfos|(?:raw)?newmember|getstatus|wakeup(?:throw)?|getstackinfos)\s*(?=\()'
      scope: support.function.squirrel
      set: start-parameters
    - match: '[^\d\W]\w*\s*(?=\()'
      scope: variable.function.squirrel
      set: start-parameters

  control:
    - match: \b(if|while|do|switch|for|foreach|return|throw|yield|continue|try|catch|resume|default|else|case|break)\b
      scope: keyword.control.squirrel

  storage:
    - match: \blocal\b
      scope: storage.type.squirrel
    - match: \b(extends|static|const)\b
      scope: storage.modifier.squirrel

  punctuation:
    - match: \.\.\.
      scope: variable.parameter
    - match: \.(?:\s*)
      scope: punctuation.accessor.squirrel
      push: maybe-member
    - match: \;
      scope: punctuation.terminator.statement.squirrel

  start-parameters:
    - match: \(
      scope: punctuation.section.parens.begin
      set: parameters

  parameters:
    - meta_scope: meta.function.parameters
    - include: no-control
    - match: \)
      scope: punctuation.section.parens.end
      pop: true

  parameter-vars:
    - match: '\b_(\w+)\b'
      scope: variable.parameter

  basics:
    - match: \btrue\b
      scope: constant.language.boolean.true.squirrel
    - match: \bfalse\b
      scope: constant.language.boolean.false.squirrel
    - match: \bnull\b
      scope: constant.language.null.squirrel
    - match: '\b(?:(?:0(?:x|X)[0-9a-fA-F]+)|(?:[0-9]+(?:\.[0-9]+(?:e?[0-9]+)?)?))\b'
      scope: constant.numeric.squirrel
    - match: \b(delete|in|clone|instanceof|typeof)\b
      scope: keyword.operator.squirrel
    - match: '!|%|&|\*|<\>\-\-|\-|\+\+|\+|==|=|!=|<=|>=|<=>|<-|>>>|<<|>>|!|&&|\|\||\?\:|\*=|\/=|%=|\+=|\-=|&=|%=|>|<|\?|\/(?=[^/])|:|\|'
      scope: keyword.operator.squirrel

  constants:
    - match: \b(base|this|vargv|vargc|parent|PI|RAND_MAX)\b
      scope: variable.language.squirrel
    - match: '\B::'
      scope: variable.language.squirrel
      push: maybe-member

  strings:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.squirrel
      push:
        - meta_scope: string.quoted.single.squirrel
        - match: "'"
          captures:
            0: punctuation.definition.string.end.squirrel
          pop: true
    - match: '@?"'
      captures:
        0: punctuation.definition.string.begin.squirrel
      push:
        - meta_scope: string.quoted.double.squirrel
        - match: '"'
          captures:
            0: punctuation.definition.string.end.squirrel
          pop: true
        - include: string_escaped_char

  maybe-member:
    - include: function-calls-member
    - include: function-defs
    - match: '[^\d\W]\w*\b'
      scope: variable.other.member.squirrel
      pop: true
    - match: $|;
      pop: true
    - match: \S*
      scope: invalid.illegal.squirrel
      pop: true
      
  string_escaped_char:
    - match: '\\(\\|[abefnprtv''"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2})'
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c
